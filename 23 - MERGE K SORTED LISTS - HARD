23 - MERGE K SORTED LISTS - HARD

You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

========================

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0) return null;

        while(lists.length > 1){
            List<ListNode> temp = new ArrayList<>();

            for(int i=0 ; i < lists.length ; i+= 2){
                ListNode l1 = lists[i];
                ListNode l2 = i+1 < lists.length ? lists[i+1] : null;
                temp.add(mergeLists(l1 , l2));

            }

            lists = temp.toArray(new ListNode[0]);
        }

        return lists[0];
    }

    public ListNode mergeLists(ListNode l1 , ListNode l2){

        ListNode temp = new ListNode();
        ListNode output = temp;

        while(l1 != null && l2 != null){
            if(l1.val < l2.val){
                temp.next = l1;
                l1 = l1.next;
            }else{
                temp.next = l2;
                l2 =l2.next;
            }

            temp = temp.next;
        }

        if(l1 != null){
            temp.next = l1;
        }else{
            temp.next = l2;
        }

        return output.next;
    }
}
