121 - BEST TIME TO BUY AND SELL STOCK
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

üî¥ Problem with end-- and start++ Approach
If you reduce end, you might miss a higher selling price in the future.
If you increase start, you might skip a lower buying price that could give a better profit.
Instead, a single pass approach (one pointer for min price) is more efficient.

‚úÖ Correct Approach
1Ô∏è‚É£ Use one pointer (minPrice) to track the lowest price so far.
2Ô∏è‚É£ Iterate through prices[] and calculate the potential profit (prices[i] - minPrice).
3Ô∏è‚É£ If prices[i] < minPrice, update minPrice.
4Ô∏è‚É£ Keep track of maxProfit while iterating.

 

Example 1:

Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.
===============

class Solution {
    public int maxProfit(int[] prices) {
        int min = prices[0];
        int profit = 0;
        for(int i : prices){
            if(i < min){
                min =i;
            }else{
                profit = Math.max(profit , i - min);
            }
        }

        return profit;
    }
}

===================

Using two pointers

class Solution {
    public int maxProfit(int[] prices) {
        int left = 0;
        int right =1;
        int maxProfit =0;

        while(right < prices.length){
            if(prices[right] > prices[left]){
                 maxProfit = Math.max(maxProfit , prices[right] - prices[left]);
            }else{
                left = right;
            }

            right++;
        }

        return maxProfit;
    }
}
