55 - JUMP GAME - MEDIUM
You are given an integer array nums. You are initially positioned at the array's first index, and each element in the array represents your maximum jump length at that position.

Return true if you can reach the last index, or false otherwise.

🔹 Problem Breakdown
You start at index 0 in an array nums, where each element represents the maximum number of steps you can jump forward from that position.

Your goal is to determine whether you can reach the last index of the array.

🔹 Understanding the Approach
Instead of trying to jump forward, your approach works backward from the last index.

Key Idea:
Start from the last index (target = nums.length - 1).
Move backward, checking if you can "jump" to or beyond the current target.
Update target whenever you find an index that can reach it.
If target reaches index 0, return true (we can reach the end).

Example: nums = [2,3,1,1,4]
We start with target = nums.length - 1 = 4 (the last index).

Index (i)	Value (nums[i])	Max Reach (i + nums[i])	Can it reach target? (i + nums[i] >= target)	Update target?
3     	     1               	3 + 1 = 4	✅              Yes (4 >= 4)	                            target = 3
2	          1	               2 + 1 = 3	✅              Yes (3 >= 3)	                            target = 2
1	          3               	1 + 3 = 4	✅              Yes (4 >= 2)	                            target = 1
0	          2	               0 + 2 = 2	✅              Yes (2 >= 1)	                            target = 0
Since we successfully updated target to 0, we return true (we can reach the last index). 🎯

Example: nums = [3,2,1,0,4] (Unreachable Case)
Index (i)	Value (nums[i])	Max Reach (i + nums[i])	Can it reach target? (i + nums[i] >= target)	Update target?
3	0	3 + 0 = 3	❌ No (3 < 4)	❌ No update
2	1	2 + 1 = 3	❌ No (3 < 4)	❌ No update
1	2	1 + 2 = 3	❌ No (3 < 4)	❌ No update
0	3	0 + 3 = 3	❌ No (3 < 4)	❌ No update
Since target never reaches 0, we return false (we cannot reach the last index). ❌

 

Example 1:

Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
Example 2:

Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.

=====================

class Solution {
    public boolean canJump(int[] nums) {
        int target = nums.length -1 ;
        int i = target -1;

        while(i >= 0){
            if(i + nums[i] >= target){
                target = i;
               
            }
             i--;
        }
        return target ==0;
    }
}


=====================
class Solution {
    public boolean canJump(int[] nums) {
        int target = nums.length -1;

        for(int i =nums.length -2 ; i >= 0 ; i--){
            if(i + nums[i] >= target){
                target = i;
            }
        }

        return target == 0; //this is to check whether we are at the starting position of the array when we try to reach the goal
    }
}
