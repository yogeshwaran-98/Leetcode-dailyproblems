530 - MINIMUM ABSOLUTE DIFFERENCE IN BST
Given the root of a Binary Search Tree (BST), return the minimum absolute difference between the values of any two different nodes in the tree.
Input: root = [4,2,6,1,3]
Output: 1

========

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int getMinimumDifference(TreeNode root) {
        List<Integer> list = new ArrayList<>();
        int minDiff = Integer.MAX_VALUE;
        helper(root , list);

        for(int i=1 ; i < list.size() ; i++){
            minDiff = Math.min(minDiff , list.get(i) - list.get(i-1));
        }

        return minDiff;
 
    }

    private void helper(TreeNode root , List<Integer> list){
        if(root == null) return ;


        //inorder
        helper(root.left , list);
        list.add(root.val);
        helper(root.right, list);

    }
}
