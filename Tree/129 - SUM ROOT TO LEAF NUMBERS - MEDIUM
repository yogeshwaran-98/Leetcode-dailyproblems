129 - SUM ROOT TO LEAF NUMBERS - MEDIUM
You are given the root of a binary tree containing digits from 0 to 9 only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.

A leaf node is a node with no children.
Example 1:


Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.
===========

**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        int[] sum ={0};
        int current =0;

        helper(root ,current , sum);

        return sum[0];
    }

    private void helper(TreeNode root ,int current, int[] sum){
        if(root == null) return;

        current = current*10 + root.val;

        if(root.left == null && root.right == null){
            sum[0]+= current;
            return;
        }

        helper(root.left , current , sum);
        helper(root.right , current , sum);

    }
}
