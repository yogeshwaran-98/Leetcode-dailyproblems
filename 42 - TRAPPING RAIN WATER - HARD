42 - TRAPPING RAIN WATER - HARD

Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.

Example 1:


Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.

📌 APPLYING THIS TO "TRAPPING RAIN WATER"
Step 1: How Do You Need to Traverse?
✅ From both ends (left and right) → Two-Pointer Approach

Step 2: Do You Need to Track Min/Max Values?
✅ Yes, track leftMax & rightMax → Helps determine trapped water.

Step 3: Do You Need to Find a Pair, Triplet, or Subarray?
❌ No, but we compare neighboring elements to decide how much water can be stored.

Step 4: Do You Need to Modify the Array In-Place?
❌ No modifications, just calculations.

Step 5: Do You Need to Search for an Element?
❌ No searching, just traversal.

Final Conclusion: Use the Two-Pointer Approach with leftMax & rightMax to efficiently compute the trapped water in O(n). ✅

================

class Solution {
    public int trap(int[] height) {
        int start =0;
        int end = height.length - 1;

        int leftMax =0 ;
        int rightMax =0;

        int totalWater =0;

        while(start < end){
            if(height[start] < height[end]){
                if(height[start] >= leftMax){
                    leftMax = height[start];
                }else{
                    totalWater+= leftMax - height[start];
                }
                 start++;
            }else{
                if(height[end] >= rightMax){
                    rightMax = height[end];
                }else{
                    totalWater+= rightMax - height[end];
                }

                end--;
            }
        }

        return totalWater;
    }

}

 The Big Picture
Imagine the given heights represent buildings and rainwater gets trapped between them.

We use two pointers:

Left pointer (left) starts at the leftmost building.
Right pointer (right) starts at the rightmost building.
Additionally, we keep track of the highest walls we've seen so far:

leftMax stores the highest building on the left side.
rightMax stores the highest building on the right side.
At each step, we move the pointer that has the smaller height because:

Water trapped at any position depends on the shorter of the two sides.
🔹 Step-by-Step Walkthrough
Let’s go through an example:

Given heights:

height = [0,1,0,2,1,0,1,3,2,1,2,1]

Step 1: Initial Setup
We start with two pointers:
left at the first building, right at the last building.
leftMax is 0 (we haven’t seen any buildings yet).
rightMax is 0 (we haven’t seen any buildings yet).
totalWater starts at 0.

Step 2: Move the Left Pointer
The leftmost building is 0, and the rightmost is 1.
Since 0 is smaller than 1, we move left forward.
Update leftMax to 0 (because there is no taller building yet).
No water is trapped at 0 because there is no boundary to the left.

Step 3: Move the Left Pointer Again
The next building is 1.
Since 1 is greater than leftMax (0), update leftMax to 1.
No water is trapped at 1 because it is a peak (higher than before).

Step 4: Move the Left Pointer Again
The next building is 0.
Now, leftMax = 1 (we've seen a taller building before).
Water can be trapped between leftMax (1) and 0.
The amount of water trapped here is 1 - 0 = 1.
Total water so far = 1.

Step 5: Move the Left Pointer Again
The next building is 2.
Since 2 is greater than leftMax (1), update leftMax to 2.
No water is trapped at 2 because it’s the tallest seen so far.

Step 6: Move the Right Pointer
Now, instead of moving left, we move right (since right is smaller than left).
The rightmost building is 1.
Since 1 is greater than rightMax (0), update rightMax to 1.
No water is trapped at 1 because it's the tallest on the right side so far.

Step 7: Move the Right Pointer Again
The next building on the right is 2.
Since 2 is greater than rightMax (1), update rightMax to 2.
No water is trapped at 2.

Step 8: Move the Right Pointer Again
The next building on the right is 1.
Water is trapped here because rightMax (2) > height (1).
The amount of water trapped is 2 - 1 = 1.
Total water so far = 2.

Step 9: Move the Left Pointer Again
Now, we go back to moving left (since left is smaller).
The next building is 0.
Water is trapped because leftMax (2) > height (0).
The amount of water trapped is 2 - 0 = 2.
Total water so far = 4.

Step 10: Move the Left Pointer Again
The next building is 1.
Water is trapped because leftMax (2) > height (1).
The amount of water trapped is 2 - 1 = 1.
Total water so far = 5.

Step 11: Move the Left Pointer Again
The next building is 3.
Since 3 is greater than leftMax (2), update leftMax to 3.
No water is trapped at 3 because it's the new tallest.

Step 12: Move the Right Pointer Again
The next building is 1.
Water is trapped because rightMax (2) > height (1).
The amount of water trapped is 2 - 1 = 1.
Total water so far = 6.
Final Answer
Total trapped water = 6 units.
🔹 Why This Works
✔ We always move the pointer pointing to the shorter height.
✔ We track the tallest buildings seen so far (leftMax, rightMax).
✔ At each step, the trapped water is determined by min(leftMax, rightMax).

