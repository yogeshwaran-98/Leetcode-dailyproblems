6. ZIGZAG CONVERSION
he string "PAYPALISHIRING" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)

P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: "PAHNAPLSIIGYIR"

Write the code that will take a string and make this conversion given a number of rows:

string convert(string s, int numRows);
 

Example 1:

Input: s = "PAYPALISHIRING", numRows = 3
Output: "PAHNAPLSIIGYIR"
========================
APPROACH: FORGET THE GAPS IN THE INPUT AND PERFORM SIMPLE ADDING CHARACTERS TO A 2D ARRAY BY ADJUSTING THE ROWS BASED ON WHETHER WE ARE AT TOP OR BOTTOM ROW

class Solution {
    public String convert(String s, int numRows) {
        if(numRows == 1|| numRows >= s.length()) return s;
        int index =0 , move = 1;
        StringBuilder res = new StringBuilder();

        List<Character>[] rows = new ArrayList[numRows];
        for(int i=0 ; i < numRows ; i++){
            rows[i] = new ArrayList<>();
        }
        for(char ch : s.toCharArray()){
            rows[index].add(ch);

            if(index == 0){
                move =1;
            }else if(index == numRows -1){
                move = -1;
            }

            index += move;
        }
        for(List<Character> list : rows){
            for(char ch : list){
                res.append(ch);
            }
        }
        return res.toString();
    }
}

//The 2D array (or List<Character>[]) avoids unnecessary overhead in appending and concatenating characters, 
leading to a more efficient algorithm with O(n) time complexity compared to O(nÂ²) for a 1D approach.
