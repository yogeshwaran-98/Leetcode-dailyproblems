160 - INTERSECTION OF TWO LINKED LIST
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. 
If the two linked lists have no intersection at all, return null.

a1 -> a2 ------->
                  c1 -> c2
b1 -> b2 -> b3 ->

=====================
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'

When we reach end of lists, go back to head of other list, so that we can find intersection at some point.
                           B→→→→→→→→→→→→
A: 4 → 1 → 8 → 4 → 5 → n → 5 → 6 → 1 → 8
B: 5 → 6 → 1 → 8 → 4 → 5 → n → 4 → 1 → 8
                               A→→→→→→→→
n is null

===============

public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode listA = headA;
        ListNode listB = headB;

        while(listA != listB){
            listA = listA != null ? listA.next : headB;
            listB = listB != null ? listB.next : headA;
        }

        return listA; //listA and listB point to the same node now
    }
}
